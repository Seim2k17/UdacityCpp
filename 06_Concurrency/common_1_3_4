Concurrency in C++11

- multiple threads inm parallel = concurrency was first introduced in c++11

- before this third party libs (like BOOST) or native concurrency support from OS had to be implemented 
- the standardization of concurrency in C++ makes it possible to develop cross platform concurrent programs
- supported by including the thread header

- a running program consist of at least one thread -> main thread
-> threads are uniquely identified by the OS by thread ID

- to create more threads we use std::thread name(functionToCall)
-> to run it in parallel within a process and to wait for it that it correctly terminates we need to call .join() after implementation of the other code to call
-> see 03_example_3.cpp
- here .join() is used to ensure that main() waits for the thread t to finish

- in concurrent programming the behavior of the code is non-deterministic
-> it can't be predicted which thread the scheduler will execute next or at which point in time

Randomness of events
- an important characteristic of concurrency is the randomness execution of the code on different machines
-> we don't know when the scheduler will execute different threads
-> but we need to deal with it in a controlled manner

Using join() as a barrier
- if we want to avoid that the order of execution is determined by the scheduler
we can use .join() as a barrier

Detach
- if we don't join a thread before its destructor is called the program could crash
- there are situations where it makes no sense to wait for a thread to finish
-> for this we can use detach() method on the thread (see 06_example_6.cpp)
- a destructor of a detached thread does nothin , i neither blocks or terminate the thread
- a detached thread can never be joined again
-> so we need to be very careful with detach
-> we need to make sure that in the thread does not access any data that might get out of scope or deleted
-> and we do not want the program to terminate with threads still running
-> if so these threads will terminate without freein ressources

1.4. Starting a Thread with Function Object (Lambda)

- passing functions to functions is one form of a callable Object
- callable objects are objects that can appear as the left-hand operand of the call operator
-> these can be pointers to functions, objects of a class that defines an overloaded function call operator & lambdas (anonymous inline function)

- by passing functions to other without arguments the only way to make data available (e.g. other variables) would be to use global variables
-> def. not good

- we could use a instances of classes which implement the () operator
-> The "most vexing parse" comes from a rule in C++ that says that anything that could be considered as a function declaration, the compiler should parse it as a function declaration - even if it could be interpreted as something else.

std::thread t1( Vehicle() );
-> ambigous since it could be interpreted either as 
1. a variable definition for variable t of class std::thread, initialized with an anonymous instance of class Vehicle 
or
2. a function declaration for a function t that returns an object of type std::thread and has a single (unnamed) parameter that is a pointer to function returning an object of type Vehicle

There are three ways of forcing the compiler to consider the line as the first case, which would create the thread object we want:

a.Add an extra pair of parentheses
    std::thread t1( (Vehicle()) );

b.Use copy initialization
    std::thread t2 = std::thread( Vehicle() );

c.Use uniform initialization with braces
    std::thread t3{ Vehicle() };


1.4.1. Lambdas

- useful way of starting a thread & passing information to it ()
- Lambda comes from Lambda Calculus a mathematical formalism invented by Alonzo Church in 1930s to investigate questions of logic & compuitability
-> Lambda calculus formed the basis of LISP
- but in C++ they have the property of being unnamed & capturing variables from the surrounding contextn but lack of execute & return function

- a lambda is often used as an argument that can take a callable object
- this can be easier than creating a named function that is only used when passed as an argument
- here Lambdas are generally be preferred because they allow the function objects to be defined inline
- a lambda == functor (function object) -> it has a type and can be passed around
-> its result object is called a CLOSURE which can be called using ()

- lambdas has 3 parts
a) capture list []
b) parameter list ()
c) main part {} -> code to be executed when calling the lambda

-> all parts could be empty

- by default the variables outside the {} could not be accessed within the lambda -> when adding a variable to the capture list it become visible inside {} and part of the lambda
- by default variables in the capture block can not be modified , but adding the keywiord mutable, allows to modify the parameter captured by copy
- lambda does not exist at runtime

-> runtime effect is the generation of an object which is called a CLOSURE
-> the distinction btw. Lambda/closure is similar to class & instance of the class

- A class only exists in the source code while the objects created from it exists at runtime

- we can use a copy of the closure to execute the code within the lambda at a position in our program different to the line where the function object was created
-> f() f1() ....

- a lambda is basically just an object and like other objects can be copied passed as a parameter, stored etc.
-> it has its own scope and can be different to those objects it has captured
-> take care, a lambdas lifetime may exceed the lifetime of its capture lists so it must be ensureed that the objects to which it refs are still in scope when the lambda is called 
-> esp. important in multithreading

- when using threads (see 12_lambda_multithread.cpp)
this could happen:

c) ID in Main (call-by-value) = 1
b) ID in Thread (call-by-value) = 0
a) ID in Thread (call-by-reference) = 1

As you can see, the output in the main thread is generated first, at which point the variable ID has taken the value 1. Then, the call-by-value thread is executed with ID at a value of 0. Then, the call-by-reference thread is executed with ID at a value of 1. This illustrates the effect of passing a value by reference : when the data to which the reference refers changes before the thread is executed, those changes will be visible to the thread. We will see other examples of such behavior later in the course, as this is a primary source of concurrency bugs.

Variadic templates
----------------

- before c++11 functions could only accept a fixed number of arguments
-> with variadic templates its possible to include any number of arguments

void printID(int id)
{
    std::this_thread::sleep_for(std::chrono::milliseconds(50));
    std::cout << "ID = " << id << std::endl;
    
}

void printIDAndName(int id, std::string name)
{
    std::this_thread::sleep_for(std::chrono::milliseconds(100));
    std::cout << "ID = " << id << ", name = " << name << std::endl;
}



int main()
{
    int id = 0; // Define an integer variable

    // starting threads using variadic templates
    std::thread t1(printID, id);
    std::thread t2(printIDAndName, ++id, "MyString");
    std::thread t3(printIDAndName, ++id); // this procudes a compiler error

    // wait for threads before returning
    t1.join();
    t2.join();
    //t3.join();


    return 0;
}

- when calling a function with variadic templates the arguments are by default either moved or copied (depending if they are rvalues or lvalues)
- if we want to move lvalues we can call std::move
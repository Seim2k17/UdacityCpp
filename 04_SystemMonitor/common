Concepts
#########

16. Project:
to complete the udacity project one must fullfill the criterias from here:
  https://review.udacity.com/#!/rubrics/3619/view

Suggestions to Make Your Project Stand Out!
Calculate CPU utilization dynamically, based on recent utilization
Sort processes based on CPU or memory utilization
Make the display interactive
Restructure the program to use abstract classes (interfaces) and pure virtual functions
Port the program to another operating system

13. process data

- data about individual processes are within /proc - folder. each process has its own folder and it called after the PID of the process
- parsing in c++ is a bit tricky -> starter code
- the UID (User identifier) of a process can be found under /proc/[PID]/status
- then the username for the UID can be found in /etc/passwd (except LDAP user ...)
- processor utilization of a process is also stored in the /proc/[PID]/stat file
  - more infos: https://man7.org/linux/man-pages/man5/proc.5.html
                https://stackoverflow.com/questions/16726779/how-do-i-get-the-total-cpu-usage-of-an-application-from-proc-pid-stat/16736599#16736599
- /proc/uptime has two values (in seconds)
  e.g.-  2304.78 22875.72
  -> #1: total uptime in seconds, #2: how much in seconds of that time the system has spend in idle mode
  -> on multicore systems the #2 number is the sum of all cores-idle time

- /proc/cpuinfo contains infos about the cpu
  -> cpu-core: Anzahl der Cores pro CPU, Hyperthreading wird hierbei nicht mitgezÃ¤hlt
  -> siblings: Anzahl der parallel arbeitenden Einheiten, Ohne Hyperthreading: Siblings = Anzahl der Cores pro CPU
                                                          Mit Hyperthreading: Siblings = 2 * Anzahl der Cores pro CPU
  --> https://linuxwiki.de/proc/cpuinfo

  - Command
  Linux stores the command used to launch the function in the /proc/[pid]/cmdline file.

StartTime of a process
- /proc/[PID]/stat #22 described the starttime of the process in "clock-ticks"
-> to convert in seconds in cpp: 
    #include <unistd.h>
    divide the "clock ticks" value by sysconf(_SC_CLK_TCK)
    Once you have converted the time value to seconds, you can use the Format::Time() function from the project starter code to display the seconds in a "HH:MM:SS" format.

11. processor data

- processor utilization data also stored in /proc/stat-file
- e.g: 18:07 $ cat /proc/stat
cpu  5968808 840049 1240444 31550860 1325942 0 121528 0 0 0
cpu0 495454 69881 104184 2628581 115849 0 8285 0 0 0
cpu1 513292 71696 106910 2601103 115444 0 1753 0 0 0
-> first line aggregates all the other cpus

- from left to right:
user: normal processes executing in user mode
nice: niced processes executing in user mode
system: processes executing in kernel mode
idle: twiddling thumbs
iowait: In a word, iowait stands for waiting for I/O to complete. But there are several problems:
        Cpu will not wait for I/O to complete, iowait is the time that a task is waiting for I/O to complete. When cpu goes into idle state for outstanding task io, another task will be scheduled on this CPU.
        In a multi-core CPU, the task waiting for I/O to complete is not running on any CPU, so the iowait of each CPU is difficult to calculate.
        The value of iowait field in /proc/stat will decrease in certain conditions. So, the iowait is not reliable by reading from /proc/stat.
irq: servicing interrupts
softirq: servicing softirqs
steal: involuntary wait
guest: running a normal guest
guest_nice: running a niced guest

- further readings: https://github.com/Leo-G/Data-Science-Wiki / https://stackoverflow.com/questions/23367857/accurate-calculation-of-cpu-usage-given-in-percentage-in-linux

8. Linux parser namespace

- LinuxParser is not a class but a namespace to access which gets the relevant data from the linux file system

- just read the data from the files per streams and set the needed data .

- e.g.:

  const std::string kProcDirectory{"/proc/"};
  const std::string kVersionFilename{"/version"};

  string os, version, kernel;
  string line;
  std::ifstream stream(kProcDirectory + kVersionFilename);
  if (stream.is_open()) {
    std::getline(stream, line);
    std::istringstream linestream(line);
    linestream >> os >> version >> kernel;
  }
  return kernel;

- inside /proc/ folder there are integer-folder -> these are pids of processes


7. system data

- linux stires a lot of system data in files in /proc directory

- infos about the os itself is in the /etc/os-release file 
--> e.g. PRETTY_NAME="Ubuntu 20.04.3 LTS"

- infos about the kernel: /proc/version - file

- infos about memory utilization: /proc/meminfo - file
  further infos: 
    - https://www.thegeekdiary.com/understanding-proc-meminfo-file-analyzing-memory-utilization-in-linux/
    - https://access.redhat.com/solutions/406773
    - htop-meanings from meminfo: https://stackoverflow.com/questions/41224738/how-to-calculate-system-memory-usage-from-proc-meminfo-like-htop/41251290#41251290

- total/running processes: /proc/stat
- uptime: /proc/uptime - file shows the uptime of the system in seconds and the amount in idle process
  fuerther infos: - https://man7.org/linux/man-pages/man5/proc.5.html

4. Structure

- system has a container of threads and processor
- there methods from linuxParser are called , which parse data from the linux file system
- then these data is taken to the NCursesDisplay to output the data

